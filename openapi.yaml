
openapi: 3.0.3
info:
  title: ssh_api
  version: 1.0.0
  description: >
    SmartServiceHub is a service marketplace platform with JWT authentication,
    roles (USER, ADMIN, MODERATOR), and support for Lua script extensions.

servers:
  - url: http://localhost:8080
    description: Local development server

security:
  - bearerAuth: []

paths:
  /log-in:
    post:
      summary: Log in a user
      description: >
        Authenticate a user and receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  format: password
                  example: admin123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR..."
        '401':
          description: Invalid username or password

  /users:
    post:
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
        '400':
          description: Invalid request
        '409':
          description: User already exists
    get:
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublicDto'

  /users/{id}:
    get:
      summary: Get a user by ID (public view)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Public user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
        '404':
          description: User not found
    put:
      summary: Update a user by ID (self only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
    delete:
      summary: Delete a user by ID (self only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted

  /users/unique:
    get:
      summary: Get unique users
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: offset
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: List of unique users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublicDto'

  /services:
    post:
      summary: Create a service post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePostCreateDto'
      responses:
        '201':
          description: Service created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePostPublicDto'
    get:
      summary: Get all services
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePostPublicDto'

  /services/{id}:
    get:
      summary: Get a service by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Service post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePostPublicDto'
    put:
      summary: Update a service (creator only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePostCreateDto'
      responses:
        '200':
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePostPublicDto'
    delete:
      summary: Delete a service (creator only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Service deleted

  /services/limit/{limit}:
    get:
      summary: Get limited list of services
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of limited services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePostPublicDto'

  /services/unique:
    get:
      summary: Get unique services
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          example: 10
        - in: query
          name: offset
          schema:
            type: integer
          example: 0
      responses:
        '200':
          description: List of unique services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServicePostPublicDto'

  /comments:
    post:
      summary: Create a comment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPublicDto'
    get:
      summary: Get all comments (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentPublicDto'

  /comments/{id}:
    get:
      summary: Get a comment by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPublicDto'
    put:
      summary: Update a comment by ID (creator only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDto'
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPublicDto'
    delete:
      summary: Delete a comment by ID (creator only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment deleted

  /comments/post/{postId}:
    get:
      summary: Get comments for a service post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments for the service
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentPublicDto'

  /comments/unique:
    get:
      summary: Get unique comments for a service
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: post_id
          schema:
            type: integer
      responses:
        '200':
          description: Unique comments list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentPublicDto'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserPublicDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com

    UserCreateDto:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    ServicePostPublicDto:
      type: object
      properties:
        id:
          type: integer
          example: 42
        title:
          type: string
          example: Website Design
        content:
          type: string
          example: I need a website designed for my business.
        userId:
          type: integer
          example: 1

    ServicePostCreateDto:
      type: object
      required: [title, content]
      properties:
        title:
          type: string
        content:
          type: string

    CommentPublicDto:
      type: object
      properties:
        id:
          type: integer
          example: 99
        content:
          type: string
          example: I can help with this service
        serviceId:
          type: integer
          example: 42
        userId:
          type: integer
          example: 1

    CommentCreateDto:
      type: object
      required: [content, serviceId]
      properties:
        content:
          type: string
        serviceId:
          type: integer
